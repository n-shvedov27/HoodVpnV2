package org.example.handler

import org.example.base.UpdateHandler
import org.example.delegate.CreateClientDelegate
import org.telegram.telegrambots.meta.api.methods.ParseMode
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Update
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardRow
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow
import org.telegram.telegrambots.meta.generics.TelegramClient

class StartHandler(
    private val client: TelegramClient
) : UpdateHandler {

    private val createClientDelegate = CreateClientDelegate()

    private val welcomeText = """
        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HoodVpn! üëã

        –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π VPN-—Å–µ—Ä–≤–∏—Å:

        ‚Äî C–∫–æ—Ä–æ—Å—Ç—å –¥–æ 1 –ì–±/—Å–µ–∫.
        ‚Äî –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–æ 500–ì–ë.
        ‚Äî –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∫–ª–∞–º—ã –Ω–∞ YouTube
        ‚Äî –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏

        –ú–µ–Ω—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –∏–ª–∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ VPN.

        –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:
    """.trimIndent()

    private fun profileText(link: String): String {
        return """
            –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Hood Vpn ‚ú®

            –í–∞—à –∫–ª—é—á:

            `$link`
        """.trimIndent()
    }

    private val selectDeviceText = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:"

    private val androidButton = InlineKeyboardButton("Android").apply {
        callbackData = CreateClientHandler.Command.CREATE_ANDROID_CLIENT.name
    }
    private val iosButton = InlineKeyboardButton("IOS").apply {
        callbackData = CreateClientHandler.Command.CREATE_IOS_CLIENT.name
    }
    private val selectDevicesKeyboard = InlineKeyboardMarkup(listOf<InlineKeyboardRow>()).apply {
        keyboard = listOf(
            InlineKeyboardRow().apply {
                add(androidButton)
                add(iosButton)
            }
        )
    }

    private val menuKeyboardRow = mutableListOf(
        KeyboardRow().apply {
            add("–ü—Ä–æ—Ñ–∏–ª—å")
            add("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN")
        }
    )

    private val menuKeyboard = ReplyKeyboardMarkup(menuKeyboardRow).apply {
        this.resizeKeyboard = true
    }

    override fun canHandle(update: Update): Boolean {
        val availableCommands = listOf(
            "/start",
            "–ü—Ä–æ—Ñ–∏–ª—å",
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN"
        )
        return availableCommands.contains(update.message?.text)
    }

    override fun handle(update: Update) {
        when (update.message.text) {
            "/start" -> onStartCommand(update)
            "–ü—Ä–æ—Ñ–∏–ª—å" -> onProfileCommand(update)
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN" -> onInstallVpnCommand(update)
        }
    }

    private fun onStartCommand(update: Update) {
        createClientDelegate.createClient(update.message.from.userName)
        val welcomeTextMessage = SendMessage(update.message.chatId.toString(), welcomeText).apply {
            replyMarkup = menuKeyboard
        }
        client.execute(welcomeTextMessage)

        val selectDeviceMessage = SendMessage(update.message.chatId.toString(), selectDeviceText).apply {
            replyMarkup = selectDevicesKeyboard
        }
        client.execute(selectDeviceMessage)
    }

    private fun onProfileCommand(update: Update) {
        val link = createClientDelegate.createClient(update.message.from.userName)
//        val link = "vless://58df263e-d00b-4d41-9ac5-043d895d2720@194.226.169.193:443?type=tcp&security=reality&pbk=NwIqni9kqF9IhpSXXPqUQbPg-1MfNJJ3KY8dWc8V-lM&fp=chrome&sni=yahoo.com&sid=cf3ede39d7d7&flow=xtls-rprx-vision#cookie027"

        val selectDeviceMessage = SendMessage(
            update.message.chatId.toString(),
            profileText(link)
        ).apply {
            parseMode = ParseMode.MARKDOWN
            disableWebPagePreview()
        }
        client.execute(selectDeviceMessage)
    }

    private fun onInstallVpnCommand(update: Update) {
        val selectDeviceMessage = SendMessage(update.message.chatId.toString(), selectDeviceText).apply {
            replyMarkup = selectDevicesKeyboard
        }
        client.execute(selectDeviceMessage)
    }
}